#nullable enable
abstract NpgsqlTypes.NpgsqlTsQuery.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
Npgsql.NpgsqlConnection.BeginBinaryExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryExporter!>!
Npgsql.NpgsqlConnection.BeginBinaryImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryImporter!>!
Npgsql.NpgsqlConnection.BeginRawBinaryCopyAsync(string! copyCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlRawCopyStream!>!
Npgsql.NpgsqlConnection.BeginTextExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextReader!>!
Npgsql.NpgsqlConnection.BeginTextImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextWriter!>!
Npgsql.NpgsqlConnection.Settings.get -> Npgsql.NpgsqlConnectionStringBuilder!
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.get -> int
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.set -> void
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslKey.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslKey.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.set -> void
NpgsqlTypes.NpgsqlTsQuery.Write(System.Text.StringBuilder! stringBuilder) -> void
override NpgsqlTypes.NpgsqlTsQuery.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlTsQuery.GetHashCode() -> int
static NpgsqlTypes.NpgsqlTsQuery.operator ==(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
static NpgsqlTypes.NpgsqlTsQuery.operator !=(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryLexeme.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryLexeme.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryNot.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryNot.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryOr.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryOr.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryAnd.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryAnd.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.GetHashCode() -> int
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.get -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.set -> void
Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Never = 0 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Always = 1 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.PerInstance = 2 -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlCommand.Disposed -> System.EventHandler?
Npgsql.NpgsqlConnection.Disposed -> System.EventHandler?
Npgsql.NpgsqlNestedDataReader
override Npgsql.NpgsqlNestedDataReader.Close() -> void
override Npgsql.NpgsqlNestedDataReader.Depth.get -> int
override Npgsql.NpgsqlNestedDataReader.FieldCount.get -> int
override Npgsql.NpgsqlNestedDataReader.GetBoolean(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.GetByte(int ordinal) -> byte
override Npgsql.NpgsqlNestedDataReader.GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetChar(int ordinal) -> char
override Npgsql.NpgsqlNestedDataReader.GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetDataTypeName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetDateTime(int ordinal) -> System.DateTime
override Npgsql.NpgsqlNestedDataReader.GetDecimal(int ordinal) -> decimal
override Npgsql.NpgsqlNestedDataReader.GetDouble(int ordinal) -> double
override Npgsql.NpgsqlNestedDataReader.GetEnumerator() -> System.Collections.IEnumerator!
override Npgsql.NpgsqlNestedDataReader.GetFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetFieldValue<T>(int ordinal) -> T
override Npgsql.NpgsqlNestedDataReader.GetFloat(int ordinal) -> float
override Npgsql.NpgsqlNestedDataReader.GetGuid(int ordinal) -> System.Guid
override Npgsql.NpgsqlNestedDataReader.GetInt16(int ordinal) -> short
override Npgsql.NpgsqlNestedDataReader.GetInt32(int ordinal) -> int
override Npgsql.NpgsqlNestedDataReader.GetInt64(int ordinal) -> long
override Npgsql.NpgsqlNestedDataReader.GetName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetOrdinal(string! name) -> int
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.GetString(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.HasRows.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsClosed.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsDBNull(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.NextResult() -> bool
override Npgsql.NpgsqlNestedDataReader.Read() -> bool
override Npgsql.NpgsqlNestedDataReader.RecordsAffected.get -> int
override Npgsql.NpgsqlNestedDataReader.this[int ordinal].get -> object!
override Npgsql.NpgsqlNestedDataReader.this[string! name].get -> object!
Npgsql.NpgsqlNestedDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
Npgsql.NpgsqlDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
Npgsql.Replication.TarFileStream
Npgsql.Replication.TarFileStream.ChkSum.get -> int
Npgsql.Replication.TarFileStream.DevMajor.get -> int
Npgsql.Replication.TarFileStream.DevMinor.get -> int
Npgsql.Replication.TarFileStream.GId.get -> int
Npgsql.Replication.TarFileStream.GName.get -> string!
Npgsql.Replication.TarFileStream.LinkName.get -> string!
Npgsql.Replication.TarFileStream.Mode.get -> int
Npgsql.Replication.TarFileStream.MTime.get -> System.DateTime
Npgsql.Replication.TarFileStream.Name.get -> string!
Npgsql.Replication.TarFileStream.Size.get -> long
Npgsql.Replication.TarFileStream.TypeFlag.get -> char
Npgsql.Replication.TarFileStream.UId.get -> int
Npgsql.Replication.TarFileStream.UName.get -> string!
override Npgsql.Replication.TarFileStream.Read(byte[]! buffer, int offset, int count) -> int
override Npgsql.Replication.TarFileStream.Read(System.Span<byte> span) -> int
override Npgsql.Replication.TarFileStream.CanRead.get -> bool
override Npgsql.Replication.TarFileStream.CanSeek.get -> bool
override Npgsql.Replication.TarFileStream.CanWrite.get -> bool
override Npgsql.Replication.TarFileStream.Flush() -> void
override Npgsql.Replication.TarFileStream.Length.get -> long
override Npgsql.Replication.TarFileStream.Position.get -> long
override Npgsql.Replication.TarFileStream.Position.set -> void
override Npgsql.Replication.TarFileStream.ReadAsync(byte[]! buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
override Npgsql.Replication.TarFileStream.Seek(long offset, System.IO.SeekOrigin origin) -> long
override Npgsql.Replication.TarFileStream.SetLength(long value) -> void
override Npgsql.Replication.TarFileStream.Write(byte[]! buffer, int offset, int count) -> void
override Npgsql.Replication.TarFileStream.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ChecksumAlgorithm.None = 0 -> Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ManifestOption
Npgsql.Replication.ManifestOption.No = 0 -> Npgsql.Replication.ManifestOption
Npgsql.Replication.ReplicationConnection.BaseBackup(string? label = null, bool progress = false, bool fast = false, bool wal = false, bool noWait = false, int? maxRate = null, bool tablespaceMap = false, bool noVerifyChecksums = false, Npgsql.Replication.ManifestOption? manifest = null, Npgsql.Replication.ChecksumAlgorithm? manifestChecksums = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerable<Npgsql.Replication.IBackupResponse!>!
Npgsql.Replication.ReplicationConnection.PostgreSqlVersion.get -> System.Version!
Npgsql.Replication.ChecksumAlgorithm.Crc32C = 1 -> Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ChecksumAlgorithm.Sha224 = 2 -> Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ChecksumAlgorithm.Sha256 = 3 -> Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ChecksumAlgorithm.Sha384 = 4 -> Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ChecksumAlgorithm.Sha512 = 5 -> Npgsql.Replication.ChecksumAlgorithm
Npgsql.Replication.ManifestOption.ForceEncode = 2 -> Npgsql.Replication.ManifestOption
Npgsql.Replication.ManifestOption.Yes = 1 -> Npgsql.Replication.ManifestOption
Npgsql.Replication.TableSpaceInfoMessage
Npgsql.Replication.TableSpaceInfoMessage.Oid.get -> uint?
Npgsql.Replication.TableSpaceInfoMessage.Path.get -> string?
Npgsql.Replication.TableSpaceInfoMessage.Size.get -> ulong?
Npgsql.Replication.TablespaceBackupTarStream
Npgsql.Replication.TablespaceBackupTarStream.TablespaceBackupTarStream() -> void
override Npgsql.Replication.TablespaceBackupTarStream.CanRead.get -> bool
override Npgsql.Replication.TablespaceBackupTarStream.CanSeek.get -> bool
override Npgsql.Replication.TablespaceBackupTarStream.CanWrite.get -> bool
override Npgsql.Replication.TablespaceBackupTarStream.DisposeAsync() -> System.Threading.Tasks.ValueTask
override Npgsql.Replication.TablespaceBackupTarStream.Flush() -> void
override Npgsql.Replication.TablespaceBackupTarStream.Length.get -> long
override Npgsql.Replication.TablespaceBackupTarStream.Position.get -> long
override Npgsql.Replication.TablespaceBackupTarStream.Position.set -> void
override Npgsql.Replication.TablespaceBackupTarStream.Read(byte[]! buffer, int offset, int count) -> int
override Npgsql.Replication.TablespaceBackupTarStream.Read(System.Span<byte> span) -> int
override Npgsql.Replication.TablespaceBackupTarStream.ReadAsync(byte[]! buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
override Npgsql.Replication.TablespaceBackupTarStream.Seek(long offset, System.IO.SeekOrigin origin) -> long
override Npgsql.Replication.TablespaceBackupTarStream.SetLength(long value) -> void
override Npgsql.Replication.TablespaceBackupTarStream.Write(byte[]! buffer, int offset, int count) -> void
Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupResponseKind.StartMessage = 0 -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupResponseKind.TablespaceInfoMessage = 1 -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupResponseKind.TablespaceDataMessage = 2 -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupResponseKind.ManifestMessage = 3 -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupResponseKind.EndMessage = 4 -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.IBackupResponse
Npgsql.Replication.IBackupResponse.Kind.get -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupPositionMessage
Npgsql.Replication.BackupPositionMessage.Kind.get -> Npgsql.Replication.BackupResponseKind
Npgsql.Replication.BackupPositionMessage.Position.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.BackupPositionMessage.TimelineId.get -> uint

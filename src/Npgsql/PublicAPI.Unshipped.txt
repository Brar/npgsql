#nullable enable
*REMOVED*abstract Npgsql.NpgsqlDatabaseInfo.GetTypes() -> System.Collections.Generic.IEnumerable<Npgsql.PostgresTypes.PostgresType!>!
abstract NpgsqlTypes.NpgsqlTsQuery.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
Npgsql.NpgsqlBinaryExporter.CancelAsync() -> System.Threading.Tasks.Task!
Npgsql.NpgsqlConnection.BeginBinaryExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryExporter!>!
Npgsql.NpgsqlConnection.BeginBinaryImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlBinaryImporter!>!
Npgsql.NpgsqlConnection.BeginRawBinaryCopyAsync(string! copyCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.NpgsqlRawCopyStream!>!
Npgsql.NpgsqlConnection.BeginTextExportAsync(string! copyToCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextReader!>!
Npgsql.NpgsqlConnection.BeginTextImportAsync(string! copyFromCommand, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.TextWriter!>!
Npgsql.NpgsqlConnection.PhysicalOpenAsyncCallback.get -> Npgsql.PhysicalOpenAsyncCallback?
Npgsql.NpgsqlConnection.PhysicalOpenAsyncCallback.set -> void
Npgsql.NpgsqlConnection.PhysicalOpenCallback.get -> Npgsql.PhysicalOpenCallback?
Npgsql.NpgsqlConnection.PhysicalOpenCallback.set -> void
Npgsql.NpgsqlConnection.Settings.get -> Npgsql.NpgsqlConnectionStringBuilder!
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.get -> int
Npgsql.NpgsqlConnectionStringBuilder.HostRecheckSeconds.set -> void
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.IncludeErrorDetail.set -> void
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.get -> bool
Npgsql.NpgsqlConnectionStringBuilder.LoadBalanceHosts.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslCertificate.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslKey.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslKey.set -> void
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.SslPassword.set -> void
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.get -> string?
Npgsql.NpgsqlConnectionStringBuilder.TargetSessionAttributes.set -> void
*REMOVED*Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.get -> int
*REMOVED*Npgsql.NpgsqlConnectionStringBuilder.WriteCoalescingDelayUs.set -> void
*REMOVED*Npgsql.INpgsqlDatabaseInfoFactory
*REMOVED*Npgsql.INpgsqlDatabaseInfoFactory.Load(Npgsql.NpgsqlConnection! conn, Npgsql.Util.NpgsqlTimeout timeout, bool async) -> System.Threading.Tasks.Task<Npgsql.NpgsqlDatabaseInfo?>!
*REMOVED*Npgsql.NpgsqlDatabaseInfo
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Host.get -> string!
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Name.get -> string!
*REMOVED*Npgsql.NpgsqlDatabaseInfo.NpgsqlDatabaseInfo(string! host, int port, string! databaseName, System.Version! version) -> void
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Port.get -> int
*REMOVED*Npgsql.NpgsqlDatabaseInfo.Version.get -> System.Version!
Npgsql.NpgsqlCopyTextReader.DisposeAsync() -> System.Threading.Tasks.ValueTask
Npgsql.PhysicalOpenAsyncCallback
Npgsql.PhysicalOpenCallback
Npgsql.Replication.ReplicationConnection.PostgreSqlVersion.get -> System.Version!
Npgsql.Replication.ReplicationConnection.ServerVersion.get -> string!
*REMOVED*Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionXid.get -> uint
*REMOVED*Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.RelationMessage.Column>
Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns.get -> System.Collections.Generic.IReadOnlyList<Npgsql.Replication.PgOutput.Messages.RelationMessage.Column>!
Npgsql.Replication.PgOutput.Messages.TransactionalMessage
Npgsql.Replication.PgOutput.Messages.TransactionalMessage.TransactionalMessage() -> void
Npgsql.Replication.PgOutput.Messages.TransactionalMessage.TransactionXid.get -> uint?
*REMOVED*Npgsql.Replication.PgOutput.Messages.TruncateMessage.RelationIds.get -> uint[]!
Npgsql.Replication.PgOutput.Messages.TransactionControlMessage
Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.TransactionControlMessage() -> void
Npgsql.Replication.PgOutput.Messages.TransactionControlMessage.TransactionXid.get -> uint
Npgsql.Replication.PgOutput.Messages.TruncateMessage.RelationIds.get -> System.Collections.Generic.IReadOnlyList<uint>!
*REMOVED*Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(string! publicationName, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
*REMOVED*Npgsql.Replication.PgOutput.Messages.BeginMessage.TransactionXid.get -> uint
*REMOVED*Npgsql.Replication.PgOutput.Messages.RelationMessage.Columns.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.RelationMessage.Column>
Npgsql.Replication.PgOutput.Messages.InsertMessage.CloneAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Npgsql.Replication.PgOutput.Messages.InsertMessage!>!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.FieldCount.get -> int
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Collections.Generic.IAsyncEnumerator<Npgsql.Replication.PgOutput.Messages.ReplicationTuple!>!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetBoolean(int i) -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetByte(int i) -> byte
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetBytes(int i, long fieldOffset, byte[]? buffer, int bufferoffset, int length) -> long
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetChar(int i) -> char
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetChars(int i, long fieldoffset, char[]? buffer, int bufferoffset, int length) -> long
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetData(int i) -> System.Data.IDataReader!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetDataTypeName(int i) -> string!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetDateTime(int i) -> System.DateTime
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetDecimal(int i) -> decimal
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetDouble(int i) -> double
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetEnumerator() -> System.Collections.Generic.IEnumerator<Npgsql.Replication.PgOutput.Messages.ReplicationTuple!>!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetFieldType(int i) -> System.Type!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetFieldValue<T>(int ordinal) -> T
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetFieldValueAsync<T>(int ordinal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<T>
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetFloat(int i) -> float
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetGuid(int i) -> System.Guid
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetInt16(int i) -> short
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetInt32(int i) -> int
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetInt64(int i) -> long
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetName(int i) -> string!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetOrdinal(string! name) -> int
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetString(int i) -> string!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetValue(int i) -> object!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.GetValues(object![]! values) -> int
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.IsDBNull(int i) -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.IsUnchangedToastedValue(int i) -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.this[int i].get -> object!
Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord.this[string! name].get -> object!
Npgsql.Replication.PgOutput.Messages.ReplicationTuple
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.GetStream() -> System.IO.Stream!
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.GetValue<T>() -> T
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.GetValueAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<T>
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.IsBinaryValue.get -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.IsDBNull.get -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.IsTextValue.get -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.IsUnchangedToastedValue.get -> bool
Npgsql.Replication.PgOutput.Messages.ReplicationTuple.ReplicationTuple() -> void
*REMOVED*Npgsql.Replication.PgOutput.Messages.TruncateMessage.RelationIds.get -> uint[]!
Npgsql.Replication.PgOutput.Messages.TupleDataKind.BinaryValue = 98 -> Npgsql.Replication.PgOutput.Messages.TupleDataKind
Npgsql.Replication.ReplicationConnection.SetReplicationStatus(NpgsqlTypes.NpgsqlLogSequenceNumber lastAppliedAndFlushedLsn) -> void
*REMOVED*Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(string! publicationName, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
*REMOVED*Npgsql.Replication.PgOutput.Messages.InsertMessage.NewRow.get -> System.ReadOnlyMemory<Npgsql.Replication.PgOutput.Messages.TupleData>
Npgsql.Replication.PgOutput.Messages.InsertMessage.NewRow.get -> Npgsql.Replication.PgOutput.Messages.ReplicationDataRecord!
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Data.get -> System.IO.Stream!
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.LogicalDecodingMessage() -> void
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.MessageLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Prefix.get -> string!
Npgsql.Replication.PgOutput.Messages.StreamAbortMessage
Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.StreamAbortMessage() -> void
Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.SubtransactionXid.get -> uint
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.CommitLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.Flags.get -> byte
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.StreamCommitMessage() -> void
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.TransactionCommitTimestamp.get -> System.DateTime
Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.TransactionEndLsn.get -> NpgsqlTypes.NpgsqlLogSequenceNumber
Npgsql.Replication.PgOutput.Messages.StreamStartMessage
Npgsql.Replication.PgOutput.Messages.StreamStartMessage.StreamSegmentIndicator.get -> byte
Npgsql.Replication.PgOutput.Messages.StreamStartMessage.StreamStartMessage() -> void
Npgsql.Replication.PgOutput.Messages.StreamStopMessage
Npgsql.Replication.PgOutput.Messages.StreamStopMessage.StreamStopMessage() -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.Messages.get -> bool?
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(string! publicationName, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null) -> void
*REMOVED*Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(System.Collections.Generic.IEnumerable<string!>! publicationNames, ulong protocolVersion = 1, bool? binary = null, bool? streaming = null) -> void
Npgsql.Replication.PgOutput.PgOutputReplicationOptions.PgOutputReplicationOptions(System.Collections.Generic.IEnumerable<string!>! publicationNames, ulong protocolVersion, bool? binary = null, bool? streaming = null, bool? messages = null) -> void
NpgsqlTypes.NpgsqlTsQuery.Write(System.Text.StringBuilder! stringBuilder) -> void
override Npgsql.NpgsqlRawCopyStream.DisposeAsync() -> System.Threading.Tasks.ValueTask
override Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.LogicalDecodingMessage!
override Npgsql.Replication.PgOutput.Messages.StreamAbortMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamAbortMessage!
override Npgsql.Replication.PgOutput.Messages.StreamCommitMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamCommitMessage!
override Npgsql.Replication.PgOutput.Messages.StreamStartMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamStartMessage!
override Npgsql.Replication.PgOutput.Messages.StreamStopMessage.Clone() -> Npgsql.Replication.PgOutput.Messages.StreamStopMessage!
override NpgsqlTypes.NpgsqlTsQuery.Equals(object? obj) -> bool
override NpgsqlTypes.NpgsqlTsQuery.GetHashCode() -> int
*REMOVED*static Npgsql.NpgsqlDatabaseInfo.ParseServerVersion(string! value) -> System.Version!
*REMOVED*static Npgsql.NpgsqlDatabaseInfo.RegisterFactory(Npgsql.INpgsqlDatabaseInfoFactory! factory) -> void
static NpgsqlTypes.NpgsqlTsQuery.operator ==(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
static NpgsqlTypes.NpgsqlTsQuery.operator !=(NpgsqlTypes.NpgsqlTsQuery? left, NpgsqlTypes.NpgsqlTsQuery? right) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryEmpty.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryLexeme.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryLexeme.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryNot.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryNot.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryOr.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryOr.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryAnd.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryAnd.GetHashCode() -> int
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.Equals(NpgsqlTypes.NpgsqlTsQuery? other) -> bool
override NpgsqlTypes.NpgsqlTsQueryFollowedBy.GetHashCode() -> int
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.get -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlConnectionStringBuilder.ArrayNullabilityMode.set -> void
Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Never = 0 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.Always = 1 -> Npgsql.ArrayNullabilityMode
Npgsql.ArrayNullabilityMode.PerInstance = 2 -> Npgsql.ArrayNullabilityMode
Npgsql.NpgsqlCommand.Disposed -> System.EventHandler?
Npgsql.NpgsqlConnection.Disposed -> System.EventHandler?
Npgsql.NpgsqlNestedDataReader
override Npgsql.NpgsqlNestedDataReader.Close() -> void
override Npgsql.NpgsqlNestedDataReader.Depth.get -> int
override Npgsql.NpgsqlNestedDataReader.FieldCount.get -> int
override Npgsql.NpgsqlNestedDataReader.GetBoolean(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.GetByte(int ordinal) -> byte
override Npgsql.NpgsqlNestedDataReader.GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetChar(int ordinal) -> char
override Npgsql.NpgsqlNestedDataReader.GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) -> long
override Npgsql.NpgsqlNestedDataReader.GetDataTypeName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetDateTime(int ordinal) -> System.DateTime
override Npgsql.NpgsqlNestedDataReader.GetDecimal(int ordinal) -> decimal
override Npgsql.NpgsqlNestedDataReader.GetDouble(int ordinal) -> double
override Npgsql.NpgsqlNestedDataReader.GetEnumerator() -> System.Collections.IEnumerator!
override Npgsql.NpgsqlNestedDataReader.GetFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetFieldValue<T>(int ordinal) -> T
override Npgsql.NpgsqlNestedDataReader.GetFloat(int ordinal) -> float
override Npgsql.NpgsqlNestedDataReader.GetGuid(int ordinal) -> System.Guid
override Npgsql.NpgsqlNestedDataReader.GetInt16(int ordinal) -> short
override Npgsql.NpgsqlNestedDataReader.GetInt32(int ordinal) -> int
override Npgsql.NpgsqlNestedDataReader.GetInt64(int ordinal) -> long
override Npgsql.NpgsqlNestedDataReader.GetName(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetOrdinal(string! name) -> int
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificFieldType(int ordinal) -> System.Type!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetProviderSpecificValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.GetString(int ordinal) -> string!
override Npgsql.NpgsqlNestedDataReader.GetValue(int ordinal) -> object!
override Npgsql.NpgsqlNestedDataReader.GetValues(object![]! values) -> int
override Npgsql.NpgsqlNestedDataReader.HasRows.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsClosed.get -> bool
override Npgsql.NpgsqlNestedDataReader.IsDBNull(int ordinal) -> bool
override Npgsql.NpgsqlNestedDataReader.NextResult() -> bool
override Npgsql.NpgsqlNestedDataReader.Read() -> bool
override Npgsql.NpgsqlNestedDataReader.RecordsAffected.get -> int
override Npgsql.NpgsqlNestedDataReader.this[int ordinal].get -> object!
override Npgsql.NpgsqlNestedDataReader.this[string! name].get -> object!
Npgsql.NpgsqlNestedDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
Npgsql.NpgsqlDataReader.GetData(int ordinal) -> Npgsql.NpgsqlNestedDataReader!
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.HasIntegerDateTimes.set -> void
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsAdvisoryLocks.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsCloseAll.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscard.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardSequences.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsDiscardTemp.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsEnumTypes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsRangeTypes.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.get -> bool
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsTransactions.set -> void
*REMOVED*virtual Npgsql.NpgsqlDatabaseInfo.SupportsUnlisten.get -> bool
Npgsql.NpgsqlParameter<T>.TypedValue.get -> T?
NpgsqlTypes.NpgsqlDate.NpgsqlDate(System.DateOnly date) -> void
static NpgsqlTypes.NpgsqlDate.ToDateOnly(NpgsqlTypes.NpgsqlDate date) -> System.DateOnly
static NpgsqlTypes.NpgsqlDate.ToNpgsqlDate(System.DateOnly date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator NpgsqlTypes.NpgsqlDate(System.DateOnly date) -> NpgsqlTypes.NpgsqlDate
static NpgsqlTypes.NpgsqlDate.explicit operator System.DateOnly(NpgsqlTypes.NpgsqlDate date) -> System.DateOnly
NpgsqlTypes.NpgsqlDbType.Xid8 = 64 -> NpgsqlTypes.NpgsqlDbType

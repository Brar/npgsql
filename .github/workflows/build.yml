name: Build

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:

env:
  dotnet_sdk_version: '6.0.x'
  postgis_version: 3
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Hack to support latest prerelease dotnet SDK, https://github.com/dotnet/installer/issues/12230#issuecomment-936348246
  MSBuildEnableWorkloadResolver: false

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019]
        pg_major: [14, 13, 12, 11, 10]
        config: [Release]
        test_tfm: [net6.0]
        include:
          - os: ubuntu-20.04
            pg_major: 14
            config: Debug
            test_tfm: net6.0
          - os: ubuntu-20.04
            pg_major: 14
            config: Release
            test_tfm: netcoreapp3.1
          - os: macos-11
            pg_major: 14
            config: Release
            test_tfm: net6.0
          - os: ubuntu-20.04
            pg_major: 15
            config: Release
            pg_prerelease: 'PG Prerelease'

    outputs:
      is_release: ${{ steps.analyze_tag.outputs.is_release }}
      is_prerelease: ${{ steps.analyze_tag.outputs.is_prerelease }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: NuGet Cache
        uses: actions/cache@v2.1.7
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Build.targets') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: |
            ${{ env.dotnet_sdk_version }}
            3.1.x

      - name: Build
        run: dotnet build -c ${{ matrix.config }}
        shell: bash

      - name: Prepare PostgreSQL ${{ matrix.pg_major }}
        shell: pwsh
        run: |
          Import-Module -Name "$Env:GITHUB_WORKSPACE/.build/CiHelper"

          if ("${{ matrix.pg_prerelease }}" -ne '') {
              Install-Postgres ${{ matrix.pg_major }} -Prerelease
          }
          else {
              Install-Postgres ${{ matrix.pg_major }}
          }

          if (-not $IsLinux) {
              Start-Postgres ${{ matrix.pg_major }}
          }
          Update-PostgresConfiguration  ${{ matrix.pg_major }}
          Update-PostgresHbaFile  ${{ matrix.pg_major }}
          Copy-SslFiles
          Restart-Postgres ${{ matrix.pg_major }}

      # TODO: Once test/Npgsql.Specification.Tests work, switch to just testing on the solution
      - name: Test
        run: dotnet test -c ${{ matrix.config }} -f ${{ matrix.test_tfm }} test/Npgsql.Tests --logger "GitHubActions;report-warnings=false"
        shell: bash

      - name: Test Plugins
        if: "!startsWith(matrix.os, 'macos')"
        run: |
            if [ -z "${{ matrix.pg_prerelease }}" ]; then
                dotnet test -c ${{ matrix.config }} -f ${{ matrix.test_tfm }} test/Npgsql.PluginTests --logger "GitHubActions;report-warnings=false"
                dotnet test -c ${{ matrix.config }} -f ${{ matrix.test_tfm }} test/Npgsql.NodaTime.Tests --logger "GitHubActions;report-warnings=false"
            fi
        shell: bash

      - id: analyze_tag
        name: Analyze tag
        shell: bash
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              echo "Release tag detected"
              echo "::set-output name=is_release::true"
              if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+.*- ]]; then
                  echo "Prerelease tag detected"
                  echo "::set-output name=is_prerelease::true"
              fi
          fi

  publish-ci:
    needs: build
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && github.repository == 'npgsql/npgsql'
    environment: myget

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: NuGet Cache
        uses: actions/cache@v2.1.7
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Build.targets') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Pack
        run: dotnet pack Npgsql.sln --configuration Release --output nupkgs --version-suffix "ci.$(date -u +%Y%m%dT%H%M%S)+sha.${GITHUB_SHA:0:9}" -p:ContinuousIntegrationBuild=true

      - name: Upload artifacts (nupkg)
        uses: actions/upload-artifact@v2
        with:
          name: Npgsql.CI
          path: nupkgs

      - name: Publish packages to MyGet (vnext)
        if: startsWith(github.ref, 'refs/heads/') && startsWith(github.ref, 'refs/heads/hotfix/') == false
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_FEED_TOKEN }} --source https://www.myget.org/F/npgsql-vnext/api/v3/index.json
        working-directory: nupkgs

      - name: Publish packages to MyGet (patch)
        if: startsWith(github.ref, 'refs/heads/hotfix/')
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.MYGET_FEED_TOKEN }} --source https://www.myget.org/F/npgsql/api/v3/index.json
        working-directory: nupkgs

  release:
    needs: build
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.repository, 'npgsql/') && needs.build.outputs.is_release == 'true'
    environment: nuget.org

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: ${{ env.dotnet_sdk_version }}

      - name: Pack
        run: dotnet pack --configuration Release --output nupkgs -p:ContinuousIntegrationBuild=true

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Npgsql.Release
          path: nupkgs

      - name: Create Github release
        uses: ncipollo/release-action@v1.9.0
        with:
          prerelease: ${{ needs.build.outputs.is_prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to nuget.org
        run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_ORG_API_KEY }} --source https://api.nuget.org/v3/index.json
        working-directory: nupkgs
